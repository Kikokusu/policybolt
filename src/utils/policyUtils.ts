export const downloadPolicyAsMarkdown = (policy: any) => {
  const markdown = `# ${policy.title}

**Version:** ${policy.version}  
**Created:** ${new Date(policy.created_at).toLocaleDateString()}  
**Status:** ${policy.status}  
${policy.approved_at ? `**Approved:** ${new Date(policy.approved_at).toLocaleDateString()}` : ''}

---

${policy.content}

---

*This privacy policy was generated by PolicyBolt - AI-powered privacy policy management.*
`;

  const blob = new Blob([markdown], { type: 'text/markdown' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `${policy.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_v${policy.version}.md`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const generateEmbedCode = (projectId: string, policyId?: string) => {
  const baseUrl = window.location.origin;
  const embedUrl = policyId 
    ? `${baseUrl}/embed/policy/${policyId}`
    : `${baseUrl}/embed/project/${projectId}/active-policy`;
  
  return `<!-- PolicyBolt Privacy Policy Widget -->
<div id="policybolt-widget" data-project="${projectId}"></div>
<script>
  (function() {
    var iframe = document.createElement('iframe');
    iframe.src = '${embedUrl}';
    iframe.style.width = '100%';
    iframe.style.border = 'none';
    iframe.style.minHeight = '400px';
    iframe.onload = function() {
      // Auto-resize iframe based on content
      iframe.contentWindow.postMessage('getHeight', '*');
    };
    
    // Listen for height updates from iframe
    window.addEventListener('message', function(event) {
      if (event.origin === '${baseUrl}' && event.data.type === 'resize') {
        iframe.style.height = event.data.height + 'px';
      }
    });
    
    var container = document.getElementById('policybolt-widget');
    if (container) {
      container.appendChild(iframe);
    }
  })();
</script>`;
};

export const copyToClipboard = async (text: string) => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (err) {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
      document.execCommand('copy');
      document.body.removeChild(textArea);
      return true;
    } catch (fallbackErr) {
      document.body.removeChild(textArea);
      return false;
    }
  }
};